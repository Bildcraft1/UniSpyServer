using System.Data;
using System;
using System.Linq;
using UniSpy.Server.ServerBrowser.V1.Abstraction.BaseClass;
using UniSpy.Server.ServerBrowser.V1.Aggregate;
using Xunit;

public class EnctypeTest : EnctypeBase
{
    public override byte[] Encrypt(byte[] data) => throw new System.NotImplementedException();
    [Fact]
    public void EncShare2Test()
    {
        uint[] tbuff = Enumerable.Repeat<uint>(1, 326).ToArray();
        var tbuffUint = Array.ConvertAll(tbuff, Convert.ToUInt32);
        var tbuffpUint = tbuffUint.ToArray();
        Encshare2(tbuffUint, 309, 6);
        var correctResult = new uint[]
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 17498629, 67830052, 39783468, 510855193, 366629229, 3551672311, 2479564971, 2781774699, 4118137534, 3094373108, 829124753, 3611234592, 1213911675, 3241236538, 3419395059, 3, 17236227, 34013461, 20580121, 306578602, 230830554, 2185634525, 1540642169, 2099507104, 1913332720, 3987761791, 3463819041, 860209457, 3948159327, 2584192363, 2377682576, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 32775, 32774, 32772, 12, 2389626517, 2938163061, 4097, 1, 1549944694, 2745022601, 3181633273, 1113334022, 2827919296, 1467047999, 1485013325, 2809953970, 4233124407, 61842888, 2999413561, 1295553734, 4062552591, 232414704, 3507545467, 787421828, 1 };
        Assert.True(correctResult.SequenceEqual(correctResult));
    }

    [Fact]
    public void EncShare1Test()
    {
        uint[] tbuff = Enumerable.Repeat<uint>(1, 326).ToArray();
        byte[] datap = ConvertUintToBytes(Enumerable.Repeat<uint>(2, 326).ToArray());
        Encshare1(tbuff, 0, datap, 0, 16);
        uint[] tbuffCorrect = new uint[] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 17498629, 67830052, 39783468, 510855193, 366629229, 3551672311, 2479564971, 2781774699, 4118137534, 3094373108, 829124753, 3611234592, 1213911675, 3241236538, 3419395059, 3, 17236227, 34013461, 20580121, 306578602, 230830554, 2185634525, 1540642169, 2099507104, 1913332720, 3987761791, 3463819041, 860209457, 3948159327, 2584192363, 2377682576, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 32775, 32774, 32772, 12, 2389626517, 2938163061, 4097, 1, 1549944694, 2745022601, 3181633273, 1113334022, 2827919296, 1467047999, 1485013325, 2809953970, 4233124407, 61842888, 2999413561, 1295553734, 4062552591, 232414704, 3507545467, 787421828, 1 };
        uint[] datapCorrect = new uint[] { 1549944692, 2745022603, 3181633275, 1113334020, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        uint[] datapUints = ConvertBytesToUint(datap);
        Assert.True(datapCorrect.SequenceEqual(datapUints));
        Assert.True(tbuffCorrect.SequenceEqual(tbuff));
    }

    [Fact]
    public void EncShare3Test()
    {
        uint[] data = Enumerable.Repeat<uint>(2, 326).ToArray();
        var dataCorrect = new uint[] {};
        EncShare3(data, 0, 0);
        Assert.True(dataCorrect.SequenceEqual(data));
    }

    [Fact]
    public void EncShare4Test()
    {
        byte[] datap = ConvertUintToBytes(Enumerable.Repeat<uint>(1, 326).ToArray());
        uint[] dest = Enumerable.Repeat<uint>(2, 326).ToArray();
        var destCorrect = new uint[] { 791505064, 2677899357, 1869417374, 1465234252, 2475789121, 740983918, 2189457908, 1330493599, 3469488310, 404138664, 3890561660, 2037844579, 3772710031, 3014765711, 1414723042, 3250538244, 2239997656, 3368442198, 2829463375, 3873709831, 1616809334, 2408416094, 2593714885, 3065269826, 2728411308, 3115826211, 623071236, 1987339440, 3503169148, 3149487561, 3216855940, 4277978053, 2694731547, 943095479, 2947390224, 3284255792, 892575532, 4092678516, 3301083488, 1701020929, 50269918, 1583105766, 1178877547, 3233684681, 100976904, 1279948990, 909431883, 2341052024, 656793440, 1229403759, 825219562, 4059029186, 1111521199, 3435794874, 3486359808, 2088400399, 1498911874, 2458935151, 2138956613, 2661076370, 4193770664, 875740486, 3789516497, 67269043, 3048411365, 3722181363, 3907409649, 842022855, 1785245261, 2997891633, 1027315374, 1448379989, 4244284893, 3856866799, 1397854789, 4294782009, 168303206, 2206334467, 3200035771, 976798254, 2054714062, 1667360351, 1852589230, 4042177498, 3823179561, 1599942934, 437785722, 2223115414, 151501413, 3317924486, 3031575332, 4143189866, 134631422, 4227418534, 2981074340, 3385320959, 117789415, 2711583408, 2879989466, 3991617966, 286206350, 1818888530, 2071585337, 3739025234, 1431558871, 2021051280, 3267424079, 2745248443, 2307337611, 589374105, 2795805112, 1734712546, 2492609632, 4126389475, 4176931104, 2374707415, 3621103376, 3924286366, 2004218049, 84087549, 3957934975, 1212547806, 1549461370, 3082111598, 4025327728, 3132657759, 202009759, 1953642301, 2290488196, 2273689622, 1532595819, 2576839429, 724152551, 2610524026, 1717830723, 1802078870, 2543150389, 2762113475, 538843459, 926252336, 1835774642, 2442121321, 1768364936, 1077865321, 707273192, 3941128409, 50449982, 218878597, 6393, 2778976161, 3183168775, 3520064586, 3974786543, 2863201253, 959919482, 4075851646, 3166321558, 3334784883, 690431172, 336772646, 2964244513, 3705314749, 420976600, 1566245846, 387311668, 1010479510, 2896847722, 2846308697, 319944579, 2930534087, 3351637619, 1195746181, 1650488629, 1751570372, 3418979436, 3570593063, 4008508924, 505193660, 2627368049, 572549046, 252515951, 673636639, 1482054814, 2913665291, 4109518194, 2812631805, 3654778850, 454681732, 33435212, 1296779424, 1364191760, 3536885831, 2644195397, 269380140, 1145189234, 1515732185, 757817052, 1128356723, 1347352576, 3637938136, 1684159756, 3840047978, 3671636355, 2155743464, 2509489735, 555702320, 2559995931, 185189712, 3587438174, 606263025, 2324213583, 2526306506, 488365343, 1094685107, 1313605119, 1886282224, 2105240036, 774640903, 808383289, 993638370, 3553739022, 1162027228, 639955374, 4210601392, 3452684985, 1381031990, 1246242604, 2172609167, 1970533518, 3688480660, 2391593397, 4261137494, 1263113115, 1919957700, 3604219589, 3806348272, 3402139713, 303092719, 1044122905, 370419094, 353606213, 1903121829, 2357873757, 235667635, 4160071907, 2425266738, 3098990011, 521996276, 858858457, 2122099102, 3755824166, 2256844040, 1061009100, 1936812966, 471501886, 1633679743, 2, 3648983511, 3019444315, 3087473871, 3504257679, 3636804204, 677370271, 1517421204, 319045361, 2414764241, 1428393162, 1627687985, 3434938190, 1735044768, 1113717230, 3367048133, 1, 1803453643, 3619135896, 151234568, 3605443923, 1593688450, 2992556862, 3389812064, 1790820139, 3447432721, 1637898815, 1432460662, 2272000269, 3310238632, 964792890, 2941880083, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 16, 2110503879, 2280433177, 65536, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

        EncShare4(datap, 1, dest);

        Assert.True(destCorrect.SequenceEqual(dest));
    }
}


public class Encrypt2Test : Enctype2
{
    public Encrypt2Test() : base("abcdef")
    {
    }

    [Fact]
    public void EncoderTest()
    {
        var data = Enumerable.Repeat<uint>(2, 326).ToArray();
        var dataBytes = ConvertUintToBytes(data);
        Encoder(GameSecreteKey, dataBytes, 6);
        var dataCorrect = new uint[] { 1667391972, 6710628, 3464277760, 3324666663, 1732499745, 230, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        data = ConvertBytesToUint(dataBytes);
        Assert.True(dataCorrect.SequenceEqual(data));
    }
}