using System.Net;
using Moq;
using UniSpyServer.Servers.NatNegotiation.Entity.Structure.Request;
using UniSpyServer.Servers.NatNegotiation.Handler.CmdHandler;
using UniSpyServer.UniSpyLib.Abstraction.Interface;
using Xunit;
namespace UniSpyServer.Servers.UniSpyServer.Servers.NatNegotiation.Test
{

    public class HandlerTest
    {
        IClient _client;
        Mock<IClient> _clientMock;
        Mock<ISession> _sessionMock;
        Mock<IServer> _serverMock;
        public HandlerTest()
        {
            _clientMock = new Mock<IClient>();
            _sessionMock = new Mock<ISession>();
            _serverMock = new Mock<IServer>();
            _serverMock.Setup(s => s.ServerID).Returns(new System.Guid());
            _serverMock.Setup(s => s.ServerName).Returns("NatNegotiation");
            _serverMock.Setup(s => s.Endpoint).Returns(new IPEndPoint(IPAddress.Any, 99));
            _sessionMock.Setup(s => s.RemoteEndPoint).Returns(_serverMock.Object.Endpoint);
            _sessionMock.Setup(s => s.RemoteIPEndPoint).Returns((IPEndPoint)_sessionMock.Object.RemoteEndPoint);
            _sessionMock.Setup(s => s.Server).Returns(_serverMock.Object);
            _clientMock.Setup(c => c.Session).Returns(_sessionMock.Object);

        }
        [Fact]
        public void InitTest()
        {
            var rawRequest = new byte[] {
            0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
            0x00,
            0x00, 0x00, 0x03, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new InitRequest(rawRequest);
            var handler = new InitHandler(_clientMock.Object, request);
            handler.Handle();
        }
        // [Fact]
        // public void AddressTest()
        // {
        //     var rawRequest = new byte[] { 0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03, 0x0a, 0x00, 0x00, 0x03, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        //     var request = new AddressCheckRequest(rawRequest);
        //     var session = new Session(ServerFactory.Server, new IPEndPoint(IPAddress.Any, 0));
        //     var handler = new AddressCheckHandler(session, request);
        //     handler.Handle();
        // }
        // [Fact]
        // public void ErtTest()
        // {
        //     var rawRequest = new byte[] {
        //     0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
        //     0x03,
        //     0x00, 0x00, 0x03, 0x09,
        //     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        //     var request = new ErtAckRequest(rawRequest);
        //     var session = new Session(ServerFactory.Server, new IPEndPoint(IPAddress.Any, 0));
        //     var handler = new ErtAckHandler(session, request);
        //     handler.Handle();
        // }
        // [Fact]
        // public void NatifyTest()
        // {
        //     var rawRequest = new byte[] {
        //     0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
        //     0x0c,
        //     0x00, 0x00, 0x03, 0x09,
        //     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        //     var request = new NatifyRequest(rawRequest);
        //     var session = new Session(ServerFactory.Server, new IPEndPoint(IPAddress.Any, 0));
        //     var handler = new NatifyHandler(session, request);
        //     handler.Handle();
        // }
    }
}