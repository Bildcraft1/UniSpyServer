using System.Net;
using UniSpy.Server.NatNegotiation.Application;
using UniSpy.Server.NatNegotiation.Contract.Request;
using UniSpy.Server.NatNegotiation.Handler.CmdHandler;
using Xunit;
namespace UniSpy.Server.NatNegotiation.Test
{

    public class HandlerTest
    {
        Client _client;
        public HandlerTest()
        {
            _client = MockObject.CreateClient();
        }
        [Fact]
        public void InitTest()
        {
            var rawRequest = new byte[] {
            0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
            0x00,
            0x00, 0x00, 0x03, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new InitRequest(rawRequest);
            var handler = new InitHandler(_client, request);
            handler.Handle();
        }
        [Fact]
        public void AddressTest()
        {
            var rawRequest = new byte[] { 0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03, 0x0a, 0x00, 0x00, 0x03, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new AddressCheckRequest(rawRequest);
            var handler = new AddressCheckHandler(_client, request);
            handler.Handle();
        }
        [Fact]
        public void ErtTest()
        {
            var rawRequest = new byte[] {
            0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
            0x03,
            0x00, 0x00, 0x03, 0x09,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new ErtAckRequest(rawRequest);
            var handler = new ErtAckHandler(_client, request);
            handler.Handle();
        }
        [Fact]
        public void NatifyTest()
        {
            var rawRequest = new byte[] {
            0xfd, 0xfc, 0x1e, 0x66, 0x6a, 0xb2, 0x03,
            0x0c,
            0x00, 0x00, 0x03, 0x09,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new NatifyRequest(rawRequest);
            var handler = new NatifyHandler(_client, request);
            handler.Handle();
        }

        [Fact]
        public void ReportTest()
        {
            var r1 = new UniSpy.Server.NatNegotiation.Aggregate.Misc.NatReportRecord()
            {
                ServerId = System.Guid.Empty,
                PublicIPAddress = IPAddress.Parse("202.91.34.186"),
                PrivateIPAddress = IPAddress.Parse("192.168.1.1")
            };

            var r2 = new UniSpy.Server.NatNegotiation.Aggregate.Misc.NatReportRecord()
            {
                ServerId = System.Guid.Empty,
                PublicIPAddress = IPAddress.Parse("202.91.34.186"),
                PrivateIPAddress = IPAddress.Parse("192.168.1.1")
            };
            Assert.Equal(r1.PublicIPAddress, r2.PublicIPAddress);
            Assert.Equal(r1.PrivateIPAddress, r2.PrivateIPAddress);
            Assert.Equal(r1.ServerId, r2.ServerId);


            // _client.Info.Cookie = 
            var req = new byte[] { 0xFD, 0xFC, 0x1E, 0x66, 0x6A, 0xB2, 0x03, 0x0D, 0x00, 0x00, 0x02, 0x9A, 0xCC, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x6D, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var request = new ReportRequest(req);
            var handler = new ReportHandler(_client, request);
            handler.Handle();
        }
    }
}